name: Validate Module Sources

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  checkov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install checkov pyyaml
      - name: Test pass.tf (should have 0 custom check failures)
        run: |
          output=$(checkov -f examples/pass.tf --external-checks-dir checkov/ --skip-check CKV_TF_1,CKV_TF_2 --compact || true)
          failures=$(echo "$output" | grep -c "CKV_TF_MODULE_SOURCE.*FAILED" || echo "0")
          echo "Found $failures custom check failures"
          if [ "$failures" -ne "0" ]; then
            echo "Expected 0 custom check failures but found $failures"
            exit 1
          fi
      - name: Test fail.tf (should have 5 custom check failures)
        run: |
          output=$(checkov -f examples/fail.tf --external-checks-dir checkov/ --skip-check CKV_TF_1,CKV_TF_2 --compact || true)
          failures=$(echo "$output" | grep -c "CKV_TF_MODULE_SOURCE.*FAILED" || echo "0")
          echo "Found $failures custom check failures"
          if [ "$failures" -ne "5" ]; then
            echo "Expected 5 custom check failures but found $failures"
            exit 1
          fi

  opa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: open-policy-agent/setup-opa@v2
      - uses: hashicorp/setup-terraform@v3
      - name: Test pass.tf (should have 0 violations)
        run: |
          cd examples
          terraform init -backend=false
          terraform plan -out=pass.tfplan pass.tf
          terraform show -json pass.tfplan > ../pass.json
          cd ..
          result=$(opa eval -d allowed-sources.yaml -d opa/module_source.rego "data.terraform.module_source.deny" --input pass.json)
          violations=$(echo "$result" | jq '. | length')
          echo "Found $violations violations"
          if [ "$violations" -ne "0" ]; then
            echo "Expected 0 violations but found $violations: $result"
            exit 1
          fi
      - name: Test fail.tf (should have 5 violations)
        run: |
          cd examples
          terraform plan -out=fail.tfplan fail.tf || true
          terraform show -json fail.tfplan > ../fail.json 2>/dev/null || {
            echo "Plan failed as expected, creating minimal JSON for validation"
            echo '{"planned_values":{"root_module":{"child_modules":[]}}}' > ../fail.json
          }
          cd ..
          # For failed plans, we need to parse the .tf file directly
          # Extract module sources from fail.tf
          modules_json='{"module":{'
          while IFS= read -r line; do
            if [[ $line =~ module[[:space:]]+\"([^\"]+)\" ]]; then
              module_name="${BASH_REMATCH[1]}"
            elif [[ $line =~ source[[:space:]]*=[[:space:]]*\"([^\"]+)\" ]]; then
              source_value="${BASH_REMATCH[1]}"
              modules_json+='"'$module_name'":{"source":"'$source_value'"},'
            fi
          done < examples/fail.tf
          modules_json="${modules_json%,}}}"
          echo "$modules_json" > fail.json
          result=$(opa eval -d allowed-sources.yaml -d opa/module_source.rego "data.terraform.module_source.deny" --input fail.json)
          violations=$(echo "$result" | jq '. | length')
          echo "Found $violations violations"
          if [ "$violations" -ne "5" ]; then
            echo "Expected 5 violations but found $violations: $result"
            exit 1
          fi

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y yq
      - run: chmod +x ./pre-commit/validate-module-sources.sh
      - name: Test pass.tf (should have 0 violations)
        run: ./pre-commit/validate-module-sources.sh examples/pass.tf
      - name: Test fail.tf (should have 5 violations)
        run: |
          output=$(./pre-commit/validate-module-sources.sh examples/fail.tf 2>&1 || true)
          violations=$(echo "$output" | grep -c "ERROR:" || echo "0")
          if [ "$violations" -ne "5" ]; then
            echo "Expected 5 violations but found $violations"
            exit 1
          fi
